// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package store

import (
	"context"
)

const createTenant = `-- name: CreateTenant :one
insert into tenants (id, repo_url, path, values)
values ($1, $2, $3, $4)
returning id, repo_url, path, values
`

type CreateTenantParams struct {
	ID      string
	RepoUrl string
	Path    string
	Values  []byte
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant,
		arg.ID,
		arg.RepoUrl,
		arg.Path,
		arg.Values,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.RepoUrl,
		&i.Path,
		&i.Values,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :one
delete from tenants
where id = $1
returning id, repo_url, path, values
`

func (q *Queries) DeleteTenant(ctx context.Context, id string) (Tenant, error) {
	row := q.db.QueryRow(ctx, deleteTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.RepoUrl,
		&i.Path,
		&i.Values,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
select id, repo_url, path, values from tenants
where id = $1
`

func (q *Queries) GetTenantByID(ctx context.Context, id string) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.RepoUrl,
		&i.Path,
		&i.Values,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
select id, repo_url, path, values from tenants
`

func (q *Queries) ListTenants(ctx context.Context) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, listTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tenant
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.RepoUrl,
			&i.Path,
			&i.Values,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :one
update tenants
set repo_url = $2, path = $3, values = $4
where id = $1
returning id, repo_url, path, values
`

type UpdateTenantParams struct {
	ID      string
	RepoUrl string
	Path    string
	Values  []byte
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, updateTenant,
		arg.ID,
		arg.RepoUrl,
		arg.Path,
		arg.Values,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.RepoUrl,
		&i.Path,
		&i.Values,
	)
	return i, err
}
